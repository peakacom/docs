{
  "openapi": "3.0.1",
  "info": {
    "title": "Peaka Gateway API",
    "description": "Peaka Gateway API Documentation",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://partner.peaka.studio/api/v1",
      "description": "Default Server URL"
    }
  ],
  "paths": {
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Read Project",
        "operationId": "readProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Read Project Example": {
                    "description": "Read Project Example",
                    "value": {
                      "id": "SksnYuxH",
                      "name": "Anapp23334",
                      "description": null,
                      "domain": "anapp2-rfto",
                      "webhookBaseUrl": "https://anapp2-rfto--test.api.peaka.host",
                      "createdAt": "2023-08-21T11:09:04.699714310Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Project",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              },
              "examples": {
                "Update Project Example": {
                  "description": "Update Project Example",
                  "value": {
                    "name": "Updated Project Name",
                    "description": "Iste aut quo maxime dolorem atque. Alias neque porro. Fugiat ipsam similique voluptate quam libero deserunt consequuntur dolorum nobis."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Update Project Example": {
                    "description": "Update Project Example",
                    "value": {
                      "id": "URNg0GIj",
                      "name": "Updated Project Name",
                      "description": "Iste aut quo maxime dolorem atque. Alias neque porro. Fugiat ipsam similique voluptate quam libero deserunt consequuntur dolorum nobis.",
                      "domain": "sampleprojectname-cdcn",
                      "webhookBaseUrl": null,
                      "createdAt": "2024-09-10T10:11:02.385253956Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted"
          }
        }
      }
    },
    "/metadata/{projectId}/{catalogId}/{schemaName}/{tableName}": {
      "put": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Update Metadata",
        "operationId": "updateMetadata",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/relations/{catalogId}/{schemaName}/{tableName}/{relationId}": {
      "put": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Update Relation From Metadata",
        "operationId": "updateRelation",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataUpdateRelationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Delete Relation From Metadata",
        "operationId": "deleteRelation",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/categorical/{catalogId}/{schemaName}/{tableName}/{columnName}": {
      "put": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Generate categorical values fro the the column.",
        "operationId": "generateCategoricalColumnValues",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCategoricalColumnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}/columns/{columnName}": {
      "put": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Update Column",
        "operationId": "updateColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Delete Column",
        "operationId": "deleteColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/queries/{queryId}": {
      "get": {
        "tags": [
          "Data -\u003E Queries"
        ],
        "summary": "Read Query",
        "operationId": "readQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                },
                "example": {
                  "id": "709922802836177297",
                  "displayName": "sampleQuery",
                  "name": "samplequery",
                  "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Data -\u003E Queries"
        ],
        "summary": "Update Query",
        "operationId": "updateQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Query Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              },
              "examples": {
                "Update Query": {
                  "description": "Update Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                  }
                },
                "Update Materialized Query": {
                  "description": "Update Materialized Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.charges",
                    "queryType": "MATERIALIZED",
                    "schedule": {
                      "expression": "PT6H"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                },
                "example": {
                  "id": "709922802836177297",
                  "displayName": "sampleQuery",
                  "name": "samplequery",
                  "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Queries"
        ],
        "summary": "Delete Query",
        "operationId": "deleteQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}": {
      "put": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Update Cache Settings",
        "operationId": "updateCacheSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Cache Settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheSettingsUpdateRequest"
              },
              "examples": {
                "Update Cache Schedules": {
                  "description": "Update Cache Schedules",
                  "value": "{\n    \"fullRefreshCacheSchedule\": {\n        \"type\": \"BASIC\",\n        \"expression\": \"PT24H\"\n    },\n    {\n     \"incrementalCacheSchedule\": {\n        \"type\": \"BASIC\",\n        \"expression\": \"PT6H\"\n    }\n}"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cache"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Delete Cache",
        "operationId": "deleteCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable/{tableName}/columns/{columnName}": {
      "put": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Update BI Column",
        "operationId": "updateBiColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Delete BI Column",
        "operationId": "deleteBiColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column deleted successfully"
          }
        }
      }
    },
    "/connections/{projectId}/{connectionId}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Get Connection",
        "description": "Get a connection by ID",
        "operationId": "getConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Connection by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Airtable Connection": {
                    "description": "Sample Airtable Connection",
                    "value": {
                      "id": "8db17e23-29de-4dab-8886-af9717e0e742",
                      "name": "airtable2",
                      "type": "airtable"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Connections"
        ],
        "summary": "Update Connection",
        "description": "Update a connection",
        "operationId": "updateConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "requestBody": {
          "description": "Connection Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionRequest"
              },
              "examples": {
                "HubSpot Connection Request with Oauth": {
                  "description": "Sample HubSpot Connection parameters",
                  "value": {
                    "name": "exampleHubspotConnection",
                    "type": "hubspot",
                    "credential": {
                      "clientId": "15d6b8c5-48ea-4955-8ce5-d04bb9adad25",
                      "clientSecret": "64d70b56-ae19-4fee-9fa2-3e9113bcb202",
                      "refreshToken": "eu1-eae3-1af4-583d-91d4-f6414699feea"
                    }
                  }
                },
                "Stripe Connection Request": {
                  "description": "Sample Stripe Connection parameters",
                  "value": {
                    "name": "exampleStripeConnection21",
                    "type": "stripe",
                    "credential": {
                      "token": "\u003CstripeToken\u003E"
                    }
                  }
                },
                "AirTable Connection Request": {
                  "description": "Sample AirTable Connection parameters",
                  "value": {
                    "name": "exampleAirtableConnection",
                    "type": "airtable",
                    "credential": {
                      "personalAccessToken": "\u003CyourAirtableApiKey\u003E"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Connections"
        ],
        "summary": "Delete Connection",
        "description": "Delete a connection",
        "operationId": "deleteConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ai/{projectId}/agent/history/{threadId}": {
      "put": {
        "tags": [
          "AI -\u003E Agent"
        ],
        "summary": "Delete AI Chat History",
        "operationId": "updateChatHistoryDisplayNameByThreadId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIChatHistoryUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AI -\u003E Agent"
        ],
        "summary": "Delete AI Chat History",
        "operationId": "deleteChatHistoryByThreadId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                },
                "examples": {
                  "List of all projects": {
                    "description": "List of all projects",
                    "value": [
                      {
                        "id": "SksnYuxH",
                        "name": "Anapp23334",
                        "description": null,
                        "domain": "anapp2-rfto",
                        "webhookBaseUrl": "https://anapp2-rfto--test.api.peaka.host",
                        "createdAt": "2023-08-21T11:09:04.699714310Z"
                      },
                      {
                        "id": "0IQ6f4QB",
                        "name": "App Deneme",
                        "description": null,
                        "domain": "appdeneme-wmdp",
                        "webhookBaseUrl": "https://appdeneme-wmdp--test.api.peaka.host",
                        "createdAt": "2023-12-14T12:38:55.025274418Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Project",
        "operationId": "createProject",
        "requestBody": {
          "description": "Project to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              },
              "examples": {
                "Create Project Example": {
                  "description": "Create Project Example",
                  "value": {
                    "name": "Sample Project Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Create Project Example": {
                    "description": "Create Project Example",
                    "value": {
                      "id": "URNg0GIj",
                      "name": "Sample Project Name",
                      "description": "Non accusantium ducimus accusantium. Laborum eum accusamus sit sit hic eaque doloremque. Occaecati blanditiis facere consequuntur consectetur culpa reiciendis hic tempore dolorem. Saepe impedit nam necessitatibus maxime numquam voluptatum cum. Adipisci mollitia blanditiis sint inventore ex commodi occaecati ipsam quas.",
                      "domain": "sampleprojectname-cdcn",
                      "webhookBaseUrl": "https://sampleprojectname-cdcn--test.api.peaka.host",
                      "createdAt": "2024-09-10T10:11:02.385253956Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/apiKeys": {
      "get": {
        "tags": [
          "Projects -\u003E Api Key"
        ],
        "summary": "List API Keys",
        "operationId": "listApiKeys",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects -\u003E Api Key"
        ],
        "summary": "Create API Key",
        "operationId": "createApiKey",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "API Key request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyRequest"
              },
              "examples": {
                "API Key Request": {
                  "description": "API Key Request",
                  "value": {
                    "name": "test"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "examples": {
                  "API Key": {
                    "description": "API Key",
                    "value": {
                      "name": "test",
                      "apiKey": "TtgGcQFq.s3fzROFoop8uHG4pS2LYhoqn1rLb6oW6",
                      "apiKeyId": "21fd1a8d-88d5-4295-b792-5b2113138057"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/semantics/{catalogId}/{schemaName}/{tableName}": {
      "post": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Generate semantics for the table",
        "operationId": "generateSemantics",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCreateSemanticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/relations/{catalogId}/{schemaName}/{tableName}/{columnName}": {
      "post": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Add Relation To Metadata",
        "operationId": "addRelation",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataAddRelationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/golden-sqls": {
      "get": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "List of golden sqls for the project.",
        "operationId": "listGoldenSqls",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Create golden sql for the project",
        "operationId": "addGoldenSql",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataAddGoldenSqlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}": {
      "post": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Create Table",
        "operationId": "createInternalTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                },
                "example": {
                  "catalogId": "1",
                  "catalogName": "peaka",
                  "schemaName": "table",
                  "tableName": "testtable",
                  "isCacheable": false,
                  "isDynamicTable": false,
                  "isCached": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Delete Table",
        "operationId": "deleteTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}/columns": {
      "get": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "List Columns",
        "description": "See Data -\u003E Catalog / List Columns for more details.",
        "operationId": "listColumns",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Add Column",
        "operationId": "addColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Column Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              },
              "examples": {
                "Add Column": {
                  "description": "Add Column",
                  "value": [
                    {
                      "dataType": "bigint",
                      "displayName": "num19",
                      "defaultValue": null,
                      "name": "num19"
                    },
                    {
                      "dataType": "bigint",
                      "displayName": "num18",
                      "defaultValue": 3,
                      "isUnique": true,
                      "name": "num18"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Column added successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnDetail"
                },
                "example": [
                  {
                    "name": "num19",
                    "dataType": "bigint",
                    "displayName": "num19",
                    "defaultValue": null,
                    "isNotNull": false,
                    "isUnique": false
                  },
                  {
                    "name": "num18",
                    "dataType": "bigint",
                    "displayName": "num18",
                    "defaultValue": "3",
                    "isNotNull": false,
                    "isUnique": true
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs": {
      "post": {
        "tags": [
          "Data -\u003E Semantic Catalogs"
        ],
        "summary": "Create a semantic catalog",
        "operationId": "createSemanticCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Semantic Catalog Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticCatalogRequest"
              },
              "example": {
                "name": "myCatalog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Catalog created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                },
                "example": {
                  "id": "688890918747898103",
                  "name": "myCatalog",
                  "displayName": "myCatalog",
                  "type": "SEMANTIC"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs/{catalogId}": {
      "post": {
        "tags": [
          "Data -\u003E Semantic Catalogs"
        ],
        "summary": "Create a semantic table",
        "operationId": "createSemanticTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Semantic Table Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticTableRequest"
              },
              "example": {
                "schemaName": "mySchema",
                "tableName": "myTableName",
                "queryId": "788890918747898752"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Table created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemanticTable"
                },
                "example": {
                  "tableId": "688890918747898103",
                  "catalogName": "myCatalog",
                  "schemaName": "mySchema",
                  "tableName": "myTableName"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs/{catalogId}/share": {
      "post": {
        "tags": [
          "Data -\u003E Semantic Catalogs"
        ],
        "summary": "Share a semantic table",
        "operationId": "shareSemanticTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Share Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogShareRequest"
              },
              "example": {
                "target": "MQtMNNBY"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Table shared"
          }
        }
      }
    },
    "/data/projects/{projectId}/queries": {
      "get": {
        "tags": [
          "Data -\u003E Queries"
        ],
        "summary": "List Queries",
        "operationId": "listQueries",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Query"
                  }
                },
                "example": [
                  {
                    "id": "709891320440684892",
                    "displayName": "sample2",
                    "name": "sample2",
                    "inputQuery": ""
                  },
                  {
                    "id": "702142445051183684",
                    "displayName": "deneme",
                    "name": "deneme",
                    "inputQuery": "SELECT count(*) from \"examplestripecatalogname\".\"payment\".\"customers\""
                  },
                  {
                    "id": "709891051854233848",
                    "displayName": "sample",
                    "name": "sample",
                    "inputQuery": ""
                  },
                  {
                    "id": "709922802836177297",
                    "displayName": "sampleQuery",
                    "name": "samplequery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Data -\u003E Queries"
        ],
        "summary": "Create Query",
        "operationId": "createQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Query Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              },
              "examples": {
                "Create Query": {
                  "description": "Create Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.customers"
                  }
                },
                "Create Materialized Query": {
                  "description": "Create Materialized Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.customers",
                    "queryType": "MATERIALIZED"
                  }
                },
                "Create Materialized Scheduled Query": {
                  "description": "Create Materialized Scheduled Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.customers",
                    "queryType": "MATERIALIZED",
                    "schedule": {
                      "expression": "PT6H"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/queries/execute": {
      "post": {
        "tags": [
          "Data -\u003E Queries"
        ],
        "summary": "Execute Query",
        "operationId": "executeQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Execute Query Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryExecuteRequest"
              },
              "examples": {
                "Execute Query": {
                  "description": "Execute Query",
                  "value": {
                    "from": [
                      {
                        "catalogName": "peaka",
                        "schemaName": "query",
                        "tableName": "samplequery"
                      }
                    ]
                  }
                },
                "Execute Query with Limit": {
                  "description": "Execute Query with Limit",
                  "value": {
                    "columns": [
                      "amount"
                    ],
                    "from": [
                      {
                        "catalogName": "peaka",
                        "schemaName": "query",
                        "tableName": "samplequery"
                      }
                    ],
                    "filters": null,
                    "limit": 3,
                    "offset": 0,
                    "orderBy": null,
                    "rows": null
                  }
                },
                "Execute Direct Stripe with Filter and Order By": {
                  "description": "Execute Direct Stripe with Filter and Order By",
                  "value": {
                    "columns": [
                      "amount"
                    ],
                    "from": [
                      {
                        "catalogName": "wilderman_green",
                        "schemaName": "payment",
                        "tableName": "charges"
                      }
                    ],
                    "filters": {
                      "and": [
                        [
                          {
                            "column": {
                              "catalogName": "wilderman_green",
                              "schemaName": "payment",
                              "tableName": "charges",
                              "columnName": "amount"
                            }
                          },
                          "\u003E",
                          [150]
                        ]
                      ]
                    },
                    "limit": 50,
                    "offset": 0,
                    "orderBy": [
                      "amount DESC"
                    ],
                    "rows": null
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                },
                "example": {
                  "columns": [
                    {
                      "catalogId": "2",
                      "catalogName": "peaka",
                      "schemaName": "query",
                      "tableName": "samplequery",
                      "columnName": "amount"
                    }
                  ],
                  "data": [
                    [
                      {
                        "name": "amount",
                        "displayName": "amount",
                        "dataType": "bigint",
                        "value": "75",
                        "order": 0
                      }
                    ],
                    [
                      {
                        "name": "amount",
                        "displayName": "amount",
                        "dataType": "bigint",
                        "value": "75",
                        "order": 0
                      }
                    ],
                    [
                      {
                        "name": "amount",
                        "displayName": "amount",
                        "dataType": "bigint",
                        "value": "75",
                        "order": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs": {
      "get": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "List Catalogs",
        "operationId": "listCatalogs",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                },
                "examples": {
                  "List Catalogs": {
                    "description": "List Catalogs",
                    "value": [
                      {
                        "id": "1",
                        "name": "peaka",
                        "displayName": "Peaka",
                        "catalogType": "internal",
                        "connectionId": null
                      },
                      {
                        "id": "2",
                        "name": "peaka",
                        "displayName": "Peaka Query",
                        "catalogType": "query",
                        "connectionId": null
                      },
                      {
                        "id": "555414570395501064",
                        "name": "examplename34",
                        "displayName": "exampleName34",
                        "catalogType": "stripe",
                        "connectionId": "fe47b030-3718-4537-a6ba-eaa93c7204ee"
                      },
                      {
                        "id": "555611268656923356",
                        "name": "examplename35",
                        "displayName": "exampleName35",
                        "catalogType": "segment",
                        "connectionId": "fe47b030-3718-4537-a6ba-eaa93c7204ee"
                      },
                      {
                        "id": "625151643029078208",
                        "name": "exampleairtablecatalog2",
                        "displayName": "exampleAirtableCatalog2",
                        "catalogType": "airtable",
                        "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "Create Catalog",
        "operationId": "createCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Catalog Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogRequest"
              },
              "examples": {
                "Create Airtable Catalog": {
                  "description": "Create Airtable Catalog",
                  "value": {
                    "name": "exampleAirtableCatalog",
                    "catalogType": "airtable",
                    "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                  }
                },
                "Create AirTable": {
                  "description": "Create AirTable",
                  "value": {
                    "name": "exampleAirtableCatalog",
                    "catalogType": "airtable",
                    "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Catalog created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                },
                "examples": {
                  "Create Airtable Catalog": {
                    "description": "Create Airtable Catalog",
                    "value": {
                      "id": "626654862255325504",
                      "name": "exampleairtablecatalog",
                      "displayName": "exampleAirtableCatalog",
                      "catalogType": "airtable",
                      "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                    }
                  },
                  "Create Stripe Catalog": {
                    "description": "Create Stripe Catalog",
                    "value": {
                      "id": "626654862255325504",
                      "name": "exampleStripeCatalog",
                      "displayName": "exampleStripeCatalog",
                      "catalogType": "stripe",
                      "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errorCode": 100,
                      "message": "There are already a catalog with same name!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache": {
      "post": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Create Cache",
        "operationId": "createCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create Cache Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheRequest"
              },
              "examples": {
                "Create Cache - One Time": {
                  "description": "Create Cache - One Time",
                  "value": {
                    "catalogId": "627249916703408649",
                    "schemaName": "payment",
                    "tableName": "customers"
                  }
                },
                "Create Cache - Incremental Update Scheduled": {
                  "description": "Create Cache - Incrementally updated every 6 hrs.",
                  "value": {
                    "catalogId": "627249916703408649",
                    "schemaName": "payment",
                    "tableName": "customers",
                    "incrementalCacheSchedule": {
                      "type": "BASIC",
                      "expression": "PT6H"
                    }
                  }
                },
                "Create Cache - Incremental and Fully Refresh Update Scheduled": {
                  "description": "Create Cache - Incrementally updated every 6 hrs  and Fully refreshed every day.",
                  "value": {
                    "catalogId": "627249916703408649",
                    "schemaName": "payment",
                    "tableName": "customers",
                    "fullRefreshCacheSchedule": {
                      "type": "BASIC",
                      "expression": "PT24H"
                    },
                    "incrementalCacheSchedule": {
                      "type": "BASIC",
                      "expression": "PT6H"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cache"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}/incrementalUpdate": {
      "post": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Update Cache Incrementally",
        "operationId": "incrementalUpdateCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}/fullRefreshUpdate": {
      "post": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Full Refresh Cache",
        "operationId": "fullRefreshCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/batch": {
      "post": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Create Batch Cache",
        "operationId": "createBatchCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create Cache Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CacheRequest"
                }
              },
              "examples": {
                "Create Multiple Caches": {
                  "description": "Create Multiple Caches",
                  "value": [
                    {
                      "catalogId": "627249916703408649",
                      "schemaName": "payment",
                      "tableName": "customers"
                    },
                    {
                      "catalogId": "627249916703408649",
                      "schemaName": "payment",
                      "tableName": "charges",
                      "incrementalCacheSchedule": {
                        "type": "BASIC",
                        "expression": "PT6H"
                      }
                    },
                    {
                      "catalogId": "627249916703408649",
                      "schemaName": "payment",
                      "tableName": "invoices",
                      "fullRefreshCacheSchedule": {
                        "type": "BASIC",
                        "expression": "PT24H"
                      },
                      "incrementalCacheSchedule": {
                        "type": "BASIC",
                        "expression": "PT6H"
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheCreateStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable/{tableName}": {
      "post": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Create BI Table",
        "operationId": "createInternalBiTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                },
                "example": {
                  "catalogId": "1",
                  "catalogName": "peaka",
                  "schemaName": "bitable",
                  "tableName": "testtable",
                  "isCacheable": false,
                  "isDynamicTable": false,
                  "isCached": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Delete BI Table",
        "operationId": "deleteBiTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable/{tableName}/columns": {
      "get": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "List BI Columns",
        "description": "See Data -\u003E Catalog / List Columns for more details.",
        "operationId": "listBiColumns",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "Add BI Column",
        "operationId": "addBiColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Column Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              },
              "examples": {
                "Add Column": {
                  "description": "Add Column",
                  "value": [
                    {
                      "dataType": "bigint",
                      "displayName": "num19",
                      "defaultValue": null,
                      "name": "num19"
                    },
                    {
                      "dataType": "bigint",
                      "displayName": "num18",
                      "defaultValue": 3,
                      "isUnique": true,
                      "name": "num18"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Column added successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnDetail"
                },
                "example": [
                  {
                    "name": "num19",
                    "dataType": "bigint",
                    "displayName": "num19",
                    "defaultValue": null,
                    "isNotNull": false,
                    "isUnique": false
                  },
                  {
                    "name": "num18",
                    "dataType": "bigint",
                    "displayName": "num18",
                    "defaultValue": "3",
                    "isNotNull": false,
                    "isUnique": true
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/connections/{projectId}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "List Connections",
        "description": "List all connections for a project",
        "operationId": "listConnections",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "List Connections": {
                    "description": "Sample List of Connections",
                    "value": [
                      {
                        "id": "c6883de8-78ab-49fb-93c0-70a13652a341",
                        "name": "Stripe Code2",
                        "type": "stripe"
                      },
                      {
                        "id": "81e6dfd0-4c88-4e81-a28b-422e89cc07c7",
                        "name": "airtable",
                        "type": "airtable"
                      },
                      {
                        "id": "8db17e23-29de-4dab-8886-af9717e0e742",
                        "name": "airtable2",
                        "type": "airtable"
                      },
                      {
                        "id": "22706960-023c-411e-a3ac-62d286fa6685",
                        "name": "exampleAirtableConnection",
                        "type": "airtable"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Connections"
        ],
        "summary": "Create Connection",
        "description": "This endpoint allows you to create a new connection for a specified project.\n\nYou need to provide the project ID and the connection details in the request body.\n\nThe connection details include the name, type, and credentials required for the connection.\n\nDepending on the connection type, additional parameters may be required under credentials.\n\nYou can view the list of supported connection types by calling the /connections/config endpoint.\n\nYou can switch examples from the second dropdown of the sample request component. (cURL (first dropdown) - Stripe Connection Request (second dropdown))\n\n**Note**: Typically, the connection creation process involves the following steps:\n1. First, learn about the connection type and the required parameters by calling the /connections/config endpoint.\n2. Create a connection request with the required parameters.\n\n**Example**:\n- POSTGRES Connection Configuration:\n\nGET /connections/config endpoint displays all of the connection types.\n\nGET /connection/config/POSTGRES endpoint displays the POSTGRES connection configuration.\n\nThe definition of the POSTGRES connection configuration is as follows:\n``` json\n    {\n        \"connectionType\": \"POSTGRES\",\n        \"connectionTypeLabel\": \"PostgreSQL\",\n        \"name\": \"PostgreSQL\",\n        \"authorizationType\": \"custom\",\n        \"credentialSchemaType\": \"postgres_credential_schema\",\n        \"category\": \"Database\",\n        \"configuration\": [\n            {\n                \"fieldName\": \"url\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"URL\"\n            },\n            {\n                \"fieldName\": \"port\",\n                \"fieldType\": \"number\",\n                \"required\": true,\n                \"description\": \"Port\"\n            },\n            {\n                \"fieldName\": \"user\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"User\"\n            },\n            {\n                \"fieldName\": \"password\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"Password\"\n            },\n            {\n                \"fieldName\": \"databaseName\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"Database Name\"\n            },\n            {\n                \"fieldName\": \"useSsl\",\n                \"fieldType\": \"boolean\",\n                \"required\": true,\n                \"description\": \"Use SSL\"\n            }\n        ],\n        \"documentationUrl\": \"https://docs.peaka.com/integrations/postgresql\"\n    }\n```\n\nAccording to the POSTGRES connection configuration, the connection request should include the following parameters (respecting to the required flag):\n- url: URL of the host IP or domain\n- port: Port number\n- user: User of the database\n- password: Password of the user\n- databaseName: Name of the database\n- useSsl: Boolean value to indicate whether to use SSL\n\n``` json\n{\n    \"name\": \"examplePostgre\",\n    \"type\": \"POSTGRES\",\n    \"credential\": {\n        \"url\": \"\u003Chost ip or domain\u003E\",\n        \"port\": 5432,\n        \"user\": \"userOfYourDB\",\n        \"password\": \"passwordOfUser\",\n        \"databaseName\": \"yourDBName\",\n        \"useSsl\": false\n    }\n}\n```\n\n",
        "operationId": "createConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "requestBody": {
          "description": "Connection Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionRequest"
              },
              "examples": {
                "Stripe Connection Request": {
                  "description": "Sample Stripe Connection parameters",
                  "value": {
                    "name": "exampleStripeConnection21",
                    "type": "stripe",
                    "credential": {
                      "token": "\u003CstripeToken\u003E"
                    }
                  }
                },
                "Connection (Oauth2) Request With Redirect Url ": {
                  "description": "Sample Oauth2 Connection with redirect url parameters",
                  "value": {
                    "name": "exampleOauthConnection",
                    "type": "google_analytics",
                    "credential": {
                      "clientId": "\u003CgoogleOauthAppClientId\u003E",
                      "clientSecret": "\u003CgoogleOauthAppClientSecret\u003E"
                    },
                    "redirectUrl": "\u003CyourRedirectUrl\u003E"
                  }
                },
                "HubSpot Connection (Oauth2) Request": {
                  "description": "Sample HubSpot Connection parameters",
                  "value": {
                    "name": "exampleHubspotConnection",
                    "type": "hubspot",
                    "credential": {
                      "clientId": "\u003ChubspotOauthAppClientId\u003E",
                      "clientSecret": "\u003ChubspotOauthAppClientSecret\u003E",
                      "refreshToken": "\u003COauthRefreshToken\u003E"
                    }
                  }
                },
                "AirTable Connection Request": {
                  "description": "Sample AirTable Connection parameters",
                  "value": {
                    "name": "exampleAirtableConnection",
                    "type": "airtable",
                    "credential": {
                      "personalAccessToken": "\u003CyourAirtableApiKey\u003E"
                    }
                  }
                },
                "PostgreSQL Connection Request": {
                  "description": "PostgreSQL Connection Request",
                  "value": {
                    "name": "examplePostgre",
                    "type": "POSTGRES",
                    "credential": {
                      "url": "\u003Chost ip or domain\u003E",
                      "port": 5432,
                      "user": "userOfYourDB",
                      "password": "passwordOfUser",
                      "databaseName": "yourDBName",
                      "useSsl": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "307": {
            "description": "Redirect to oauth consent page",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "200": {
            "description": "Connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Successful Stripe Connection": {
                    "description": "Sample Stripe Connection",
                    "value": {
                      "id": "6243f42a-42d0-4821-a90f-763cda6cda50",
                      "name": "exampleStripeConnection21",
                      "type": "stripe"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai/{projectId}/agent": {
      "post": {
        "tags": [
          "AI -\u003E Agent"
        ],
        "summary": "Ask Question To AI Agent",
        "operationId": "ask",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ui/initSession": {
      "get": {
        "tags": [
          "Embedded Peaka"
        ],
        "summary": "Init Session",
        "description": "Init session for the user",
        "operationId": "initSession",
        "parameters": [
          {
            "name": "timeoutInSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "theme",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "themeOverride",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedSession"
                },
                "examples": {
                  "Session created successfully": {
                    "description": "Session created successfully",
                    "value": {
                      "sessionUrl": "https://partner.peaka.studio/api/v1/ui/session?code=2eccdbf31efa110943b470b9023e9a52587c166e4d1c21f23fabbcd7de5b74ab"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supportedDrivers": {
      "get": {
        "tags": [
          "Supported Drivers"
        ],
        "summary": "List Supported Drivers",
        "operationId": "getSupportedDrivers",
        "parameters": [
          {
            "name": "catalogName",
            "in": "query",
            "description": "Catalog name. \n\nDrivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "sampleHubSpotCatalog"
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported drivers",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "List of all drivers.": {
                    "description": "List of all drivers.",
                    "value": {
                      "JDBC": "jdbc:peaka://dbc.peaka.studio:4567/?extraCredentials=peakaKey:gk4aUnCO.IYxkP1NxP67YkVViqYGZd4INpUAr04TE",
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/{catalogName}?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZd4INpUAr04TE\"]]&access_token=true"
                    }
                  },
                  "List of all drivers with CatalogName": {
                    "description": "Drivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use.",
                    "value": {
                      "JDBC": "jdbc:peaka://dbc.peaka.studio:4567/?extraCredentials=peakaKey:gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE",
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/sampleCatalog?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE\"]]&access_token=true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supportedDrivers/sql_alchemy": {
      "get": {
        "tags": [
          "Supported Drivers"
        ],
        "summary": "Get SQL Alchemy Driver",
        "operationId": "getSqlAlchemyDriver",
        "parameters": [
          {
            "name": "catalogName",
            "in": "query",
            "description": "Catalog name. \n\nDrivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use. ",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sampleHubSpotCatalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Url for given driver",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "SQL_ALCHEMY driver with Catalog provided": {
                    "description": "Drivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use.",
                    "value": {
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/sampleCatalog?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE\"]]&access_token=true"
                    }
                  },
                  "SQL_ALCHEMY driver without Catalog not provided": {
                    "description": "Drivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use. The user should replace {catalogName} with the catalog desired.",
                    "value": {
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/{catalogName}?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZd4INpUAr04TE\"]]&access_token=true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supportedDrivers/jdbc": {
      "get": {
        "tags": [
          "Supported Drivers"
        ],
        "summary": "Get JDBC Driver",
        "operationId": "getJdbcDriver",
        "responses": {
          "200": {
            "description": "Url for given driver",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "JDBC driver": {
                    "description": "JDBC driver",
                    "value": "{\n    \"JDBC\": \"jdbc:peaka://dbc.peaka.studio:4567/?extraCredentials=peakaKey:gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE\",\n}\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}": {
      "get": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Get Project Metadata",
        "operationId": "getProjectMetadata",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/relations/{catalogId}": {
      "get": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Get Project Catalog Metadata Relations",
        "operationId": "getProjectCatalogMetadataRelations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/questions/generate": {
      "get": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Generate sample ai questions for the project",
        "operationId": "generateSampleQuestions",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/table": {
      "get": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "List Tables",
        "description": "See Data -\u003E Catalog / List Tables for more details.",
        "operationId": "listTables",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "Read Catalog",
        "operationId": "readCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                },
                "examples": {
                  "Read Catalog": {
                    "description": "Read Catalog",
                    "value": {
                      "id": "627249916703408649",
                      "name": "exampleairtablecatalog",
                      "displayName": "exampleAirtableCatalog",
                      "catalogType": "airtable",
                      "connectionId": "8db17e23-29de-4dab-8886-af9717e0e74311"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "Delete Catalog",
        "operationId": "deleteCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas": {
      "get": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "List Schemas",
        "operationId": "listSchemas",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schema"
                  }
                },
                "examples": {
                  "List Schemas": {
                    "description": "List Schemas",
                    "value": [
                      {
                        "catalogId": "544639856899260964",
                        "schemaName": "testSchema"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables": {
      "get": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "List Tables",
        "operationId": "listTables_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                },
                "examples": {
                  "List Tables": {
                    "description": "List Tables",
                    "value": [
                      {
                        "catalogId": "544639856899260964",
                        "catalogName": "airtable2",
                        "schemaName": "test",
                        "tableName": "projects",
                        "isCacheable": false,
                        "isDynamicTable": false,
                        "isCached": false
                      },
                      {
                        "catalogId": "544639856899260964",
                        "catalogName": "airtable2",
                        "schemaName": "test",
                        "tableName": "testTable",
                        "isCacheable": false,
                        "isDynamicTable": false,
                        "isCached": false
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables/{tableName}/isCached": {
      "get": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "Table is Cached",
        "operationId": "isCached",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableCacheResult"
                },
                "examples": {
                  "Table is Cached": {
                    "description": "Table is Cached",
                    "value": {
                      "isCached": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables/{tableName}/columns": {
      "get": {
        "tags": [
          "Data -\u003E Catalogs"
        ],
        "summary": "List Columns",
        "operationId": "listColumns_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                },
                "examples": {
                  "List Columns": {
                    "description": "List Columns",
                    "value": [
                      {
                        "name": "id",
                        "dataType": "bigint",
                        "displayName": "id",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "hs_object_id",
                        "dataType": "varchar",
                        "displayName": "hs_object_id",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "email",
                        "dataType": "varchar",
                        "displayName": "email",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "name",
                        "dataType": "varchar",
                        "displayName": "name",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "domain",
                        "dataType": "varchar",
                        "displayName": "domain",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "industry",
                        "dataType": "varchar",
                        "displayName": "industry",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "phone",
                        "dataType": "varchar",
                        "displayName": "phone",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "country",
                        "dataType": "varchar",
                        "displayName": "country",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "state",
                        "dataType": "varchar",
                        "displayName": "state",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "city",
                        "dataType": "varchar",
                        "displayName": "city",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "description",
                        "dataType": "varchar",
                        "displayName": "description",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "createdate",
                        "dataType": "timestamp(6)",
                        "displayName": "createdate",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "hs_lastmodifieddate",
                        "dataType": "timestamp(6)",
                        "displayName": "hs_lastmodifieddate",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "properties",
                        "dataType": "json",
                        "displayName": "properties",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "propertieswithhistory",
                        "dataType": "json",
                        "displayName": "propertieswithhistory",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "createdat",
                        "dataType": "timestamp(6)",
                        "displayName": "createdat",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "updatedat",
                        "dataType": "timestamp(6)",
                        "displayName": "updatedat",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "archived",
                        "dataType": "boolean",
                        "displayName": "archived",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "archivedat",
                        "dataType": "timestamp(6)",
                        "displayName": "archivedat",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "associations",
                        "dataType": "json",
                        "displayName": "associations",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_pagination_anchor",
                        "dataType": "varchar",
                        "displayName": "_q_pagination_anchor",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_limit",
                        "dataType": "bigint",
                        "displayName": "_q_limit",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_offset",
                        "dataType": "varchar",
                        "displayName": "_q_offset",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_properties",
                        "dataType": "json",
                        "displayName": "_q_properties",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_properties_with_history",
                        "dataType": "varchar",
                        "displayName": "_q_properties_with_history",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_associations",
                        "dataType": "varchar",
                        "displayName": "_q_associations",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_archived",
                        "dataType": "boolean",
                        "displayName": "_q_archived",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalog/{catalogId}/cache/status": {
      "get": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Get All Cache Statuses of a Catalog",
        "operationId": "getCacheStatusByCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}/status": {
      "get": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Get Cache Status",
        "operationId": "getCacheStatus",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CacheStatus"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/status": {
      "get": {
        "tags": [
          "Data -\u003E Cache"
        ],
        "summary": "Get All Cache Statuses of a Project",
        "operationId": "getCacheStatusByProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable": {
      "get": {
        "tags": [
          "Data -\u003E Internal Tables"
        ],
        "summary": "List BI Tables",
        "description": "See Data -\u003E Catalog / List Tables for more details.",
        "operationId": "listBiTables",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/{projectId}/{connectionId}/detail": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Get Connection Detail",
        "description": "Get connection detail by ID. Returns only non-sensitive information.",
        "operationId": "getConnectionView",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection Detail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "Connection Detail": {
                    "description": "Sample Bullhorn Connection parameters",
                    "value": {
                      "type": "bullhorn",
                      "restApiTokenUrl": "http://a.b.c",
                      "swimlane": "123",
                      "corpToken": "123"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/config": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "List Connection Config",
        "description": "List all connection configurations.\nThis will return a list of all connection configurations available in the system.",
        "operationId": "listConnectionConfig",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/config/{connectionType}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Get Connection Config",
        "operationId": "getConnectionConfig",
        "parameters": [
          {
            "name": "connectionType",
            "in": "path",
            "description": "Type of connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "hubspot"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/ai/{projectId}/agent/history": {
      "get": {
        "tags": [
          "AI -\u003E Agent"
        ],
        "summary": "Get AI Chat History",
        "operationId": "getChatHistory",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/apiKeys/{apiKeyId}": {
      "delete": {
        "tags": [
          "Projects -\u003E Api Key"
        ],
        "summary": "Delete API Key",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Key deleted"
          }
        }
      }
    },
    "/metadata/{projectId}/golden-sqls/{id}": {
      "delete": {
        "tags": [
          "Data -\u003E Metadata"
        ],
        "summary": "Delete golden sql from the project.",
        "operationId": "deleteGoldenSql",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs/{catalogId}/table/{tableId}": {
      "delete": {
        "tags": [
          "Data -\u003E Semantic Catalogs"
        ],
        "summary": "Delete a semantic table",
        "operationId": "deleteSemanticTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table deleted"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProjectRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My Project"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the project",
            "example": "This is a project that does something"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Project ID"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the project"
          },
          "domain": {
            "type": "string",
            "description": "Domain of the project"
          },
          "webhookBaseUrl": {
            "type": "string",
            "description": "Webhook base URL"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the project was created"
          }
        },
        "description": "Project"
      },
      "MetadataColumn": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "columnDescription": {
            "type": "string"
          },
          "dataType": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "isNotNull": {
            "type": "boolean"
          },
          "isSystem": {
            "type": "boolean"
          },
          "isUnique": {
            "type": "boolean"
          },
          "isPrimary": {
            "type": "boolean"
          },
          "isCategorical": {
            "type": "boolean"
          },
          "categoricalValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lineage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataColumnLineage"
            }
          }
        }
      },
      "MetadataColumnLineage": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "column": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          }
        }
      },
      "MetadataUpdateRequest": {
        "type": "object",
        "properties": {
          "tableDescription": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataColumn"
            }
          },
          "useWithAI": {
            "type": "boolean"
          }
        }
      },
      "MetadataUpdateRelationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "MetadataCategoricalColumnRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ColumnRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the column."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column."
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the column."
          },
          "isNotNull": {
            "type": "boolean",
            "description": "The not null flag for the column."
          },
          "isUnique": {
            "type": "boolean",
            "description": "The unique flag for the column."
          }
        },
        "description": "This class represents a ColumnRequest.\n It contains the name, data type, display name, default value, not null and unique status of the column request."
      },
      "ColumnDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the column."
          },
          "name": {
            "type": "string",
            "description": "The name of the column."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column."
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the column."
          },
          "isNotNull": {
            "type": "boolean",
            "description": "The not null flag for the column."
          },
          "isUnique": {
            "type": "boolean",
            "description": "The unique flag for the column."
          }
        }
      },
      "QueryRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the query."
          },
          "inputQuery": {
            "type": "string",
            "description": "The sql query."
          },
          "queryType": {
            "type": "string",
            "description": "The type of the query:\n PLAIN or MATERIALIZED\n\n\n Default is PLAIN."
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "The expression of the schedule.\n The expression is a duration in ISO-8601 format.\n \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)"
          }
        },
        "description": "This class represents a schedule for a materialized query."
      },
      "Query": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the query."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the query."
          },
          "name": {
            "type": "string",
            "description": "The name of the query.\n\n This is the name of the query which will be used in the sql query.\n e.g. SELECT * FROM \"peaka\".\"query\".\"\u003Cname\u003E\""
          },
          "inputQuery": {
            "type": "string",
            "description": "The sql query."
          },
          "inputQueryRefId": {
            "type": "string",
            "description": "The reference id of the input query."
          },
          "queryType": {
            "type": "string",
            "description": "The type of the query:\n PLAIN or MATERIALIZED"
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        }
      },
      "CacheSettingsUpdateRequest": {
        "type": "object",
        "properties": {
          "incrementalCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "fullRefreshCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        },
        "description": "This class represents a request to cache data.\n It contains the catalog ID, schema name, table name, and schedule of the cache request."
      },
      "Cache": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the cache."
          },
          "appId": {
            "type": "string",
            "description": "The ID of the application for the cache request."
          },
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog for the cache request."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema for the cache request."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table for the cache request."
          },
          "incrementalCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "fullRefreshCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        }
      },
      "ConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the connection given by the user"
          },
          "type": {
            "type": "string",
            "description": "Type of connection.\n \n Example: airtable for AirTable, stripe for Stripe, hubspot_access_token for HubSpot (with Access Token), etc.\n\n Exact list can be fetched by following url: /connections/config"
          },
          "credential": {
            "type": "object",
            "additionalProperties": true,
            "description": "Credential object for the connection.\n\nIts structure is dependent on the connection type and can be fetched by following url: /connections/config\n"
          },
          "redirectUrl": {
            "type": "string",
            "description": "The url to redirect to after a successful connection"
          }
        }
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Connection ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the connection"
          },
          "type": {
            "type": "string",
            "description": "Type of connection.\n\nExample: airtable for AirTable, stripe for Stripe, hubspot_access_token for HubSpot (with Access Token), etc.\n\nExact list can be fetched by following url: /connections/config\n"
          },
          "url": {
            "type": "string",
            "description": "Oauth callback url if the connection is Oauth based.\n"
          }
        }
      },
      "AIChatHistoryUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ApiKeyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API key"
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API key"
          },
          "apiKey": {
            "type": "string",
            "description": "API key. It is a secret and should not be shared. Please store it securely. You will not be able to see it again."
          },
          "apiKeyId": {
            "type": "string",
            "description": "ID of the API key",
            "format": "uuid"
          }
        },
        "description": "Represents an API key."
      },
      "MetadataCreateSemanticsRequest": {
        "type": "object",
        "properties": {
          "threadId": {
            "type": "string"
          },
          "initialPrompt": {
            "type": "string"
          }
        }
      },
      "MetadataAddRelationRequest": {
        "type": "object",
        "properties": {
          "targetCatalogId": {
            "type": "string"
          },
          "targetSchemaName": {
            "type": "string"
          },
          "targetTableName": {
            "type": "string"
          },
          "targetColumnName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "MetadataAddGoldenSqlRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string"
          },
          "sql": {
            "type": "string"
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the table belongs to."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog that the table belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema that the table belongs to."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "isCacheable": {
            "type": "boolean",
            "description": "Indicates whether the table is cacheable or not."
          },
          "isDynamicTable": {
            "type": "boolean",
            "description": "Indicates whether the table has required query parameter columns or not.\n A query parameter column is prefixed with \"_q_\" e.g. \"_q_date\".\n These columns are used to filter the data in the table."
          },
          "isCached": {
            "type": "boolean",
            "description": "Indicates whether the table is cached or not."
          }
        },
        "description": "Represents a table in a schema."
      },
      "SemanticCatalogRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the catalog"
          }
        }
      },
      "Catalog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the catalog."
          },
          "name": {
            "type": "string",
            "description": "The name of the catalog."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the catalog."
          },
          "catalogType": {
            "type": "string",
            "description": "The type of the catalog."
          },
          "connectionId": {
            "type": "string",
            "description": "The connection ID of the catalog."
          }
        },
        "description": "This class represents a Catalog.\n It contains the id, name, display name, type, and connection ID of the catalog."
      },
      "SemanticTableRequest": {
        "type": "object",
        "properties": {
          "schemaName": {
            "type": "string",
            "description": "The name of the schema."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "queryId": {
            "type": "string",
            "description": "The ID of the query which is used to populate the semantic table."
          }
        }
      },
      "SemanticTable": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the table belongs to."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog that the table belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema that the table belongs to."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "tableId": {
            "type": "string",
            "description": "The ID of the semantic table."
          }
        },
        "description": "Represents a table in a schema."
      },
      "CatalogShareRequest": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "Target Project ID"
          }
        }
      },
      "QueryExecuteRequest": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableForQuery"
            }
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "orderBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "TableForQuery": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "catalogName": {
            "type": "string"
          },
          "schemaName": {
            "type": "string"
          },
          "tableName": {
            "type": "string"
          }
        }
      },
      "CellValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the column."
          },
          "value": {
            "type": "string",
            "description": "The value of the column."
          },
          "order": {
            "type": "integer",
            "description": "The order of the column in its row.",
            "format": "int32"
          }
        },
        "description": "Represents a cell value in the query result."
      },
      "Column": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog for the column."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog for the column."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema for the column."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table for the column."
          },
          "columnName": {
            "type": "string",
            "description": "The name of the column."
          }
        },
        "description": "This class represents a Column.\n It contains the catalog ID, catalog name, schema name, table name, and column name."
      },
      "QueryResult": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "The columns of the query result.",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "data": {
            "type": "array",
            "description": "The data of the query result.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CellValue"
              }
            }
          }
        },
        "description": "Represents the result of a query."
      },
      "CatalogRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the catalog"
          },
          "connectionId": {
            "type": "string",
            "description": "Connection ID.\n\nThis is the ID of the connection that is used to connect to the catalog.\n\nYou must create a connection before creating a catalog.\n"
          }
        }
      },
      "CacheRequest": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog for the cache request."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema for the cache request."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table for the cache request."
          },
          "incrementalCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "fullRefreshCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        },
        "description": "This class represents a request to cache data.\n It contains the catalog ID, schema name, table name, and schedule of the cache request."
      },
      "CacheCreateStatus": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "cache": {
            "$ref": "#/components/schemas/Cache"
          }
        }
      },
      "AIAgentTaskRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "EmbeddedSession": {
        "type": "object",
        "properties": {
          "sessionUrl": {
            "type": "string",
            "description": "The URL of the Embedded Peaka session to be followed.\n\nIt is a one-time use URL that will redirect the user to the Peaka session.\n"
          },
          "partnerOrigin": {
            "type": "string",
            "description": "The origin of the partner that the embedded studio is coming from.\n"
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the schema belongs to."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog that the schema belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema."
          }
        }
      },
      "TableCacheResult": {
        "type": "object",
        "properties": {
          "isCached": {
            "type": "boolean",
            "description": "Indicates whether the table is cacheable or not."
          }
        }
      },
      "CacheActionRecord": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "action": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "cacheType": {
            "type": "string"
          },
          "isScheduled": {
            "type": "boolean"
          }
        }
      },
      "CacheExecutionInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "object"
          },
          "progress": {
            "$ref": "#/components/schemas/CacheExecutionProgress"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CacheExecutionProgress": {
        "type": "object",
        "properties": {
          "numberOfCachedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfInsertedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfUpdatedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfDeletedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "lastOffset": {
            "type": "string"
          },
          "lastCacheTxId": {
            "type": "string"
          }
        }
      },
      "CacheStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the cache."
          },
          "status": {
            "type": "string",
            "description": "The status of the cache.\n RUNNING, CANCELLED, FAILED, COMPLETED, DELETED, NOT_INITIALIZED",
            "enum": [
              "RUNNING",
              "CANCELLED",
              "FAILED",
              "COMPLETED",
              "DELETED",
              "NOT_INITIALIZED"
            ]
          },
          "appId": {
            "type": "string",
            "description": "The ID of the app that the cache belongs to."
          },
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the cache belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema that the cache belongs to."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table that the cache belongs to."
          },
          "lastIncrementalCacheExecution": {
            "$ref": "#/components/schemas/CacheExecutionInfo"
          },
          "lastFullRefreshCacheExecution": {
            "$ref": "#/components/schemas/CacheExecutionInfo"
          },
          "cacheActionLogs": {
            "type": "array",
            "description": "The list of cache action logs",
            "items": {
              "$ref": "#/components/schemas/CacheActionRecord"
            }
          }
        }
      },
      "ConnectionConfiguration": {
        "type": "object",
        "properties": {
          "connectionType": {
            "type": "string",
            "description": "The type of the connection. e.g. stripe, airtable, etc."
          },
          "connectionTypeLabel": {
            "type": "string",
            "description": "The label for the connection type."
          },
          "name": {
            "type": "string",
            "description": "The name of the connection."
          },
          "authorizationType": {
            "type": "string",
            "description": "The type of authorization used for the connection. e.g. oauth2, api_key, bearer_token, etc."
          },
          "credentialSchemaType": {
            "type": "string",
            "description": "The type of the credential schema used for the connection."
          },
          "category": {
            "type": "string",
            "description": "The category of the connection."
          },
          "configuration": {
            "type": "array",
            "description": "The list of configuration fields for the connection.",
            "items": {
              "$ref": "#/components/schemas/ConnectionConfigurationItem"
            }
          },
          "documentationUrl": {
            "type": "string",
            "description": "The URL for the documentation of the connection."
          }
        }
      },
      "ConnectionConfigurationItem": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "The name of the field."
          },
          "fieldType": {
            "type": "string",
            "description": "The type of the field.",
            "enum": [
              "text",
              "number",
              "boolean"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether the field is required."
          },
          "description": {
            "type": "string",
            "description": "The description of the field."
          }
        },
        "description": "Represents a configuration field for a connection."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Api Key"
      }
    }
  }
}